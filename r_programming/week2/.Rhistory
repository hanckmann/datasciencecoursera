demo()
smooth
quit
n <- 150 # number of data points
p <- 2 # dimension
sigma <- 1 # variance of the distribution
meanpos <- 0 # centre of the distribution of positive examples
meanneg <- 3 # centre of the distribution of negative examples
npos <- round(n/2) # number of positive examples
nneg <- n-npos # number of negative examples
# Generate the positive and negative examples
xpos <- matrix(rnorm(npos*p,mean=meanpos,sd=sigma),npos,p)
xneg <- matrix(rnorm(nneg*p,mean=meanneg,sd=sigma),npos,p)
x <- rbind(xpos,xneg)
# Generate the labels
y <- matrix(c(rep(1,npos),rep(-1,nneg)))
# Visualize the data
plot(x,col=ifelse(y>0,1,2))
legend("topleft",c('Positive','Negative'),col=seq(2),pch=1,text.col=seq(2))
## Prepare a training and a test set ##
ntrain <- round(n*0.8) # number of training examples
tindex <- sample(n,ntrain) # indices of training samples
xtrain <- x[tindex,]
xtest <- x[-tindex,]
ytrain <- y[tindex]
ytest <- y[-tindex]
istrain=rep(0,n)
istrain[tindex]=1
# Visualize
plot(x,col=ifelse(y>0,1,2),pch=ifelse(istrain==1,1,2))
legend("topleft",c('Positive Train','Positive Test','Negative Train','Negative Test'),
col=c(1,1,2,2),pch=c(1,2,1,2),text.col=c(1,1,2,2))
# load the kernlab package
library(kernlab)
Sys.getenv("R_LIBS_USER")
install.packages("kernlab")
# load the kernlab package
library(kernlab)
# train the SVM
svp <- ksvm(xtrain,ytrain,type="C-svc",kernel='vanilladot',C=100,scaled=c())
# General summary
svp
# Attributes that you can access
attributes(svp)
# For example, the support vectors
alpha(svp)
alphaindex(svp)
b(svp)
# Use the built-in function to pretty-plot the classifier
plot(svp,data=xtrain)
# Predict labels on test
ypred = predict(svp,xtest)
table(ytest,ypred)
# Compute accuracy
sum(ypred==ytest)/length(ytest)
# Compute at the prediction scores
ypredscore = predict(svp,xtest,type="decision")
# Check that the predicted labels are the signs of the scores
table(ypredscore > 0,ypred)
# Package to compute ROC curve, precision-recall etc...
library(ROCR)
install.packages("rocr")
install.packages("ROCR")
# Package to compute ROC curve, precision-recall etc...
library(ROCR)
pred <- prediction(ypredscore,ytest)
# Plot ROC curve
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf)
# Plot precision/recall curve
perf <- performance(pred, measure = "prec", x.measure = "rec")
plot(perf)
# Plot accuracy as function of threshold
perf <- performance(pred, measure = "acc")
plot(perf)
cv.folds <- function(n,folds=3)
## randomly split the n samples into folds
{
split(sample(n),rep(1:folds,length=length(y)))
}
install.packages("swift")
install.packages("swift")
install.packages("swirl")
library(SWIRL)
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my
my_div
library(swirl)
swirl()
6+7
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+10
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
z/my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
5+7
x<-5+7
x
x-3
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,c)
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,10, by=0.5)
seq(0,10, by=0.5)
my_seq<-seq(5,10,length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(.5, 55, -10, 6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c('My', 'name','is')
my_char
paste(my_char, collapse=' ')
c(my_char, 'patrick')
my_name<-c(my_char, 'patrick')
my_name
paste(my_name, collapse=' ')
paste("Hello", "world!", sep=" ")
paste(1:3,c("X","Y","Z", sep=""))
paste(c(1:3),c("X","Y","Z", sep=""))
paste(c(1:3), c("X", "Y", "Z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data<-sample(c(y,z), 100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x1:10]
x[1:10]
x[is.na(x)]]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[300]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,na)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo",bar"")]
vect[c("foo","bar")]
my_vect<-1:20
my_vect<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
my_vector
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(data=1:20, nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data)<-cnames
my_data
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Data Analysis")
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Open Intro")
install_from_swirl("Regression Models")
swirl()
x <- c(4, "a", TRUE)
x
class(x)
x <- list(2, "a", "b", TRUE)
x[[2]]
y<-x[[2]]
class(y)
x[2]
x <- c(17, 14, 4, 5, 13, 12, 10)
x
x[x > 10] <- 4
x
xf=read.csv('/home/hanckmannp/Downloads/hw1_data.csv')
xf
class(xf)
xf(2,)
xf[2,]
xf[3,]
xf[1:2,]
size(x)
rows(x)
nrow(x)
nrow(xf)
xf[-2:-1,]
xf[152:153,]
xf[47,]
xf[47,$Ozone]
oz=xf[,1]
oz
is.na(oz)
sum(is.na(oz))
oz2<-oz[complete.cases(oz),]
oz[complete.cases(oz),]
oz
xf
xf[complete.cases(xf),]
xf2<-xf[complete.cases(xf),]
mean(xf2[1,])
sum(xf2[1,])
oz2=xf2[1,]
oz2
mean(xf2[,1])
xf
xf2
xf3<-xf2[xf2[,1]>31]
xf3<-xf2[xf2[,1]>31,]
xf3
xf4<-xf3[xf3[,4]>90,]
xf4
mean(xf4(,2))
mean(xf4[,2])
xf2
xf5<-xf2[xf2[,5]==6,]
xf5
mean(xf5[,4])
xf5<-xf1[xf1[,5]==6,]
xf5<-xf[xf[,5]==6,]
mean(xf5[,4])
xf3<-xf[xf[,1]>31]
xf3<-xf[xf[,1]>31,]
xf4<-xf3[xf3[,4]>90,]
mean(xf4[,2])
may<-xf[xf[,5]==5,]
max
may
max(max[,1])
get_wd
get_wd()
getwd()
setwd('/home/hanckmannp/Projects/datasciencecoursera/r_programming/week2/')
getwd()
?vector()
id=1:10
id
length(id)
paste(5, '.csv')
paste0(5, '.csv')
pollutantmean()
source('pollutantmean.R')
source('pollutantmean.R')
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 70:72)
source('pollutantmean.R')
pollutantmean("specdata", "nitrate", 70:72)
getwd()
source('pollutantmean.R')
getwd()
source('pollutantmean.R')
pollutantmean("specdata", "nitrate", 70:72)
source('pollutantmean.R')
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 70:72)
source('pollutantmean.R')
pollutantmean("specdata", "nitrate", 70:72)
source('pollutantmean.R')
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", -1:72)
pollutantmean("specdata", "nitrate", 110:72)
a='abc'
a
length(a)
nchar(a)
source('pollutantmean.R')
pollutantmean("specdata", "nitrate", -1:72)
pollutantmean("specdata", "nitrate", 110:72)
pollutantmean("specdata", "nitrate", 30:72)
pollutantmean("specdata", "nitrate", 1000:72)
pollutantmean("specdata", "nitrate", 100:99)
source('pollutantmean.R')
pollutantmean("specdata", "nitrate", 100:99)
a<-read.csv('/home/hanckmannp/Projects/datasciencecoursera/r_programming/week2/specdata/100.csv')
a
a[1:3,]
df = data.frame(matrix(vector(), 0, 3, dimnames=list(c(), c("Date", "File", "User"))), stringsAsFactors=F)
df
?data.frame
df = data.frame()
df
a<-read.csv('/home/hanckmannp/Projects/datasciencecoursera/r_programming/week2/specdata/100.csv')
rbind(df,a)
b<-rbind(df,a)
b[1:3,]
a[1:3,]
a='aa'
b='bb'
c='aa'
a==b
a==c
b
b<-rbind(df,a)
b[1:3,]
a<-read.csv('/home/hanckmannp/Projects/datasciencecoursera/r_programming/week2/specdata/100.csv')
a[1:3,]
a[,$nitrate]
a[,'nitrate']
source('pollutantmean.R')
source('pollutantmean.R')
pollutantmean("specdata", "nitrate", 100:99)
source('pollutantmean.R')
pollutantmean("specdata", "nitrate", 100:99)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source('pollutantmean.R')
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 70:72)
source('complete')
source('complete.R')
complete('specdata',2:3)
source('complete.R')
complete('specdata',2:3)
?colnames
?data.frame
source('complete.R')
?data.frame
complete('specdata',2:3)
source('complete.R')
complete('specdata',2:3)
clear
complete('specdata',2:3)
?matrix
source('complete.R')
complete('specdata',2:3)
source('complete.R')
complete('specdata',2:3)
source('complete.R')
complete('specdata',2:3)
source('complete.R')
complete('specdata',2:3)
source('complete.R')
complete('specdata',2:3)
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
source('complete.R')
v=c(T, F, T, F)
sum(v)
source('complete.R')
source('complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
source('complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
source('complete.R')
source('complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
source('complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
source('complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
source('complete.R')
complete("specdata", 30:25)
complete("specdata", 3)
source('corr.R')
corr("specdata", 3)
source('corr.R')
corr("specdata", 3)
source('corr.R')
corr("specdata", 3)
corr("specdata", 1000)
source('corr.R')
corr("specdata", 1000)
?vector
c<-vector(length=3)
c
c[1]<-1
c
c[2]<-'b'
c
c[2]<-3
c
coo_count <- complete(directory, 1:332)
coo_count <- complete('specdata', 1:332)
coo_count
coo_count <- coo_count[coo_count$nobs > 999,]
coo_count
coo=coo_count
coo[1,2]=5
coo
coo[2,1]
?cor
a<-read.csv('/home/hanckmannp/Projects/datasciencecoursera/r_programming/week2/specdata/100.csv')
a
cor(a, use="complete.obs")
a
cor(a[,2:3], use="complete.obs")
a[1:2,]
cor(a[,c('sulfate', 'nitrate')], use="complete.obs")
cor(a[,c('sulfate', 'nitrate')], use="complete.obs")[1,2]
source('corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
summary(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
